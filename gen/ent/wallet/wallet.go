// Code generated by ent, DO NOT EDIT.

package wallet

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the wallet type in the database.
	Label = "wallet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// Table holds the table name of the wallet in the database.
	Table = "wallets"
)

// Columns holds all SQL columns for wallet fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UUIDValidator is a validator for the "UUID" field. It is called by the builders before save.
	UUIDValidator func(string) error
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount int
)

// OrderOption defines the ordering options for the Wallet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the UUID field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}
