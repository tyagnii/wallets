// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/intf.go
//
// Generated by this command:
//
//	mockgen -source internal/db/intf.go -destination gen/mock/mock.go
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDBConnector is a mock of DBConnector interface.
type MockDBConnector struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnectorMockRecorder
}

// MockDBConnectorMockRecorder is the mock recorder for MockDBConnector.
type MockDBConnectorMockRecorder struct {
	mock *MockDBConnector
}

// NewMockDBConnector creates a new mock instance.
func NewMockDBConnector(ctrl *gomock.Controller) *MockDBConnector {
	mock := &MockDBConnector{ctrl: ctrl}
	mock.recorder = &MockDBConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConnector) EXPECT() *MockDBConnectorMockRecorder {
	return m.recorder
}

// ChangeWalletBalance mocks base method.
func (m *MockDBConnector) ChangeWalletBalance(ctx context.Context, uuid, op string, amount int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeWalletBalance", ctx, uuid, op, amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeWalletBalance indicates an expected call of ChangeWalletBalance.
func (mr *MockDBConnectorMockRecorder) ChangeWalletBalance(ctx, uuid, op, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeWalletBalance", reflect.TypeOf((*MockDBConnector)(nil).ChangeWalletBalance), ctx, uuid, op, amount)
}

// CreateWallet mocks base method.
func (m *MockDBConnector) CreateWallet(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockDBConnectorMockRecorder) CreateWallet(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockDBConnector)(nil).CreateWallet), ctx)
}

// GetWalletBalance mocks base method.
func (m *MockDBConnector) GetWalletBalance(ctx context.Context, uuid string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", ctx, uuid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockDBConnectorMockRecorder) GetWalletBalance(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockDBConnector)(nil).GetWalletBalance), ctx, uuid)
}
